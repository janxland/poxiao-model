{"ast":null,"code":"/**\n * tdesign v1.9.0\n * (c) 2024 tdesign\n * @license MIT\n */\n\nvar getDomWidth = function getDomWidth(dom) {\n  return (dom === null || dom === void 0 ? void 0 : dom.offsetWidth) || 0;\n};\nvar tabBase = {\n  calcScrollLeft: function calcScrollLeft(elements, scrollLeft) {\n    var container = elements.navsContainer;\n    var wrap = elements.navsWrap;\n    var rightOperations = elements.rightOperations;\n    var rightOperationsZoneWidth = getDomWidth(rightOperations);\n    if (!wrap || !container) return scrollLeft;\n    var containerWidth = getDomWidth(container);\n    var wrapWidth = getDomWidth(wrap);\n    if (wrapWidth <= containerWidth) {\n      return 0;\n    }\n    if (scrollLeft + containerWidth - rightOperationsZoneWidth > wrapWidth) {\n      return wrapWidth + rightOperationsZoneWidth - containerWidth;\n    }\n    return scrollLeft;\n  },\n  calculateCanToLeft: function calculateCanToLeft(depElement, scrollLeft, placement) {\n    if ([\"left\", \"right\"].includes(placement.toLowerCase())) {\n      return false;\n    }\n    var container = depElement.navsContainer,\n      wrap = depElement.navsWrap,\n      leftOperations = depElement.leftOperations,\n      toLeftBtn = depElement.toLeftBtn;\n    if (!wrap || !container) {\n      return false;\n    }\n    var leftOperationsZoneWidth = getDomWidth(leftOperations);\n    var leftIconWidth = getDomWidth(toLeftBtn);\n    return scrollLeft + Math.round(leftOperationsZoneWidth - leftIconWidth) > 0;\n  },\n  calculateCanToRight: function calculateCanToRight(depElement, scrollLeft, placement) {\n    if ([\"left\", \"right\"].includes(placement.toLowerCase())) {\n      return false;\n    }\n    var container = depElement.navsContainer,\n      wrap = depElement.navsWrap,\n      rightOperations = depElement.rightOperations,\n      toRightBtn = depElement.toRightBtn;\n    if (!wrap || !container) {\n      return false;\n    }\n    var rightOperationsZoneWidth = getDomWidth(rightOperations);\n    var rightIconWidth = getDomWidth(toRightBtn);\n    return scrollLeft + getDomWidth(container) - (rightOperationsZoneWidth - rightIconWidth) - getDomWidth(wrap) < -1;\n  },\n  moveActiveTabIntoView: function moveActiveTabIntoView(depElement, scrollLeft) {\n    var activeTab = depElement.activeTab,\n      container = depElement.navsContainer,\n      navsWrap = depElement.navsWrap,\n      leftOperations = depElement.leftOperations,\n      toLeftBtn = depElement.toLeftBtn,\n      rightOperations = depElement.rightOperations,\n      toRightBtn = depElement.toRightBtn;\n    if (!activeTab) return scrollLeft;\n    var totalWidthBeforeActiveTab = activeTab.offsetLeft;\n    if (!container) return scrollLeft;\n    var _getLeftCoverWidth = function _getLeftCoverWidth() {\n      var leftOperationsZoneWidth = getDomWidth(leftOperations);\n      var leftIconWidth = getDomWidth(toLeftBtn);\n      if (totalWidthBeforeActiveTab === 0) {\n        return leftOperationsZoneWidth - leftIconWidth;\n      }\n      return leftOperationsZoneWidth;\n    };\n    var leftCoverWidth = _getLeftCoverWidth();\n    var isCurrentTabHiddenInLeftZone = scrollLeft + leftCoverWidth > totalWidthBeforeActiveTab;\n    if (isCurrentTabHiddenInLeftZone) {\n      return totalWidthBeforeActiveTab - leftCoverWidth;\n    }\n    var activeTabWidth = activeTab.offsetWidth;\n    if (!container || !navsWrap) return scrollLeft;\n    var containerWidth = getDomWidth(container);\n    var _getRightCoverWidth = function _getRightCoverWidth() {\n      var rightOperationsZoneWidth = getDomWidth(rightOperations);\n      var rightIconWidth = getDomWidth(toRightBtn);\n      var wrapWidth = getDomWidth(navsWrap);\n      if (Math.abs(totalWidthBeforeActiveTab + activeTabWidth - wrapWidth) < 1) {\n        return rightOperationsZoneWidth - rightIconWidth;\n      }\n      return rightOperationsZoneWidth;\n    };\n    var rightCoverWidth = _getRightCoverWidth();\n    var isHiddenInRightZone = scrollLeft + containerWidth - rightCoverWidth < totalWidthBeforeActiveTab + activeTabWidth;\n    if (isHiddenInRightZone) {\n      return totalWidthBeforeActiveTab + activeTabWidth - containerWidth + rightCoverWidth;\n    }\n    return scrollLeft;\n  },\n  scrollToLeft: function scrollToLeft(depElement, scrollLeft) {\n    var container = depElement.navsContainer,\n      leftOperations = depElement.leftOperations,\n      toLeftBtn = depElement.toLeftBtn;\n    if (!container) return 0;\n    var leftOperationsZoneWidth = getDomWidth(leftOperations);\n    var leftIconWidth = getDomWidth(toLeftBtn);\n    var containerWidth = getDomWidth(container);\n    return Math.max(-(leftOperationsZoneWidth - leftIconWidth), scrollLeft - containerWidth);\n  },\n  scrollToRight: function scrollToRight(depElement, scrollLeft) {\n    var container = depElement.navsContainer,\n      wrap = depElement.navsWrap,\n      rightOperations = depElement.rightOperations,\n      toRightBtn = depElement.toRightBtn;\n    var rightOperationsZoneWidth = getDomWidth(rightOperations);\n    var rightIconWidth = getDomWidth(toRightBtn);\n    var containerWidth = getDomWidth(container);\n    var wrapWidth = getDomWidth(wrap);\n    return Math.min(scrollLeft + containerWidth - rightOperationsZoneWidth - rightIconWidth, wrapWidth - containerWidth + rightOperationsZoneWidth - rightIconWidth);\n  }\n};\nexport { tabBase as default };","map":{"version":3,"names":["getDomWidth","dom","offsetWidth","tabBase","calcScrollLeft","elements","scrollLeft","container","navsContainer","wrap","navsWrap","rightOperations","rightOperationsZoneWidth","containerWidth","wrapWidth","calculateCanToLeft","depElement","placement","includes","toLowerCase","leftOperations","toLeftBtn","leftOperationsZoneWidth","leftIconWidth","Math","round","calculateCanToRight","toRightBtn","rightIconWidth","moveActiveTabIntoView","activeTab","totalWidthBeforeActiveTab","offsetLeft","_getLeftCoverWidth","leftCoverWidth","isCurrentTabHiddenInLeftZone","activeTabWidth","_getRightCoverWidth","abs","rightCoverWidth","isHiddenInRightZone","scrollToLeft","max","scrollToRight","min"],"sources":["../../../../src/_common/js/tabs/base.ts"],"sourcesContent":["const getDomWidth = (dom: HTMLElement): number => dom?.offsetWidth || 0;\n\ntype navPlacement = 'left' | 'right' | 'top' | 'bottom';\n\nexport interface allElementDeps {\n  activeTab?: HTMLElement;\n  navsContainer?: HTMLElement;\n  navsWrap?: HTMLElement;\n  leftOperations?: HTMLElement;\n  toLeftBtn?: HTMLElement;\n  rightOperations?: HTMLElement;\n  toRightBtn?: HTMLElement;\n}\n\nexport default {\n  /**\n   * 计算滚动条的当前偏移值，用于 resize 时调整\n   * @returns number\n   */\n  calcScrollLeft(elements: allElementDeps, scrollLeft: number): number {\n    const container = elements.navsContainer;\n    const wrap = elements.navsWrap;\n    const { rightOperations } = elements;\n    const rightOperationsZoneWidth = getDomWidth(rightOperations);\n\n    if (!wrap || !container) return scrollLeft;\n\n    const containerWidth = getDomWidth(container);\n    const wrapWidth = getDomWidth(wrap);\n\n    if (wrapWidth <= containerWidth) {\n      // 容器大于选项，则设置第一个 nav-item 和容器左边相连\n      return 0;\n    }\n\n    // 一般发生在 window.resize，容器变大，此时设置最后一个 nav-item 和容器右边相连\n    if (scrollLeft + containerWidth - rightOperationsZoneWidth > wrapWidth) {\n      return wrapWidth + rightOperationsZoneWidth - containerWidth;\n    }\n\n    return scrollLeft;\n  },\n\n  /**\n   * 计算往左滚动按钮是否应该出现\n   * @param depElement 计算时依赖的元素\n   * @param scrollLeft 当前的 scrollLeft\n   * @param placement navs 的位置\n   * @returns boolean\n   */\n  calculateCanToLeft(depElement: allElementDeps, scrollLeft: number, placement: navPlacement) {\n    if (['left', 'right'].includes(placement.toLowerCase())) {\n      return false;\n    }\n    const { navsContainer: container, navsWrap: wrap, leftOperations, toLeftBtn } = depElement;\n    if (!wrap || !container) {\n      return false;\n    }\n    const leftOperationsZoneWidth = getDomWidth(leftOperations);\n    const leftIconWidth = getDomWidth(toLeftBtn);\n\n    return scrollLeft + Math.round(leftOperationsZoneWidth - leftIconWidth) > 0;\n  },\n\n  /**\n   * 计算往右滚动按钮是否应该出现\n   * @param depElement 计算时依赖的元素\n   * @param scrollLeft 当前的偏移值\n   * @param placement navs 的位置\n   * @returns boolean\n   */\n  calculateCanToRight(depElement: allElementDeps, scrollLeft: number, placement: navPlacement) {\n    if (['left', 'right'].includes(placement.toLowerCase())) {\n      return false;\n    }\n    const { navsContainer: container, navsWrap: wrap, rightOperations, toRightBtn } = depElement;\n    if (!wrap || !container) {\n      return false;\n    }\n    const rightOperationsZoneWidth = getDomWidth(rightOperations);\n    const rightIconWidth = getDomWidth(toRightBtn);\n    return (\n      scrollLeft + getDomWidth(container) - (rightOperationsZoneWidth - rightIconWidth)\n      - getDomWidth(wrap) < -1\n    ); // 小数像素不精确，所以这里判断小于-1\n  },\n\n  /**\n   * 计算将当前 tab 滚动到可视区域的偏移值\n   * @param depElement 计算时依赖的元素\n   * @param scrollLeft 当前的偏移值\n   * @returns number\n   */\n  moveActiveTabIntoView(depElement: allElementDeps, scrollLeft: number): number {\n    const {\n      activeTab,\n      navsContainer: container,\n      navsWrap,\n      leftOperations,\n      toLeftBtn,\n      rightOperations,\n      toRightBtn,\n    } = depElement;\n    if (!activeTab) return scrollLeft;\n    const totalWidthBeforeActiveTab = activeTab.offsetLeft;\n    if (!container) return scrollLeft;\n    // 如果要当前tab左边对齐左操作栏的右边以展示完整的tab，需要获取左边操作栏的宽度\n    const _getLeftCoverWidth = () => {\n      const leftOperationsZoneWidth = getDomWidth(leftOperations);\n      const leftIconWidth = getDomWidth(toLeftBtn);\n      // 判断当前tab是不是第一个tab\n      if (totalWidthBeforeActiveTab === 0) {\n        // 如果是第一个tab要移动到最左边，则要减去左箭头的宽度，因为此时左箭头会被隐藏起来\n        return leftOperationsZoneWidth - leftIconWidth;\n      }\n      return leftOperationsZoneWidth;\n    };\n    const leftCoverWidth = _getLeftCoverWidth();\n    // 判断当前tab是不是在左边被隐藏\n    const isCurrentTabHiddenInLeftZone = scrollLeft + leftCoverWidth > totalWidthBeforeActiveTab;\n    if (isCurrentTabHiddenInLeftZone) {\n      return totalWidthBeforeActiveTab - leftCoverWidth;\n    }\n\n    // move to right\n    const activeTabWidth = activeTab.offsetWidth;\n    if (!container || !navsWrap) return scrollLeft;\n    const containerWidth = getDomWidth(container);\n    // 如果要当前tab右边对齐右操作栏的左边以展示完整的tab，需要获取右边操作栏的宽度\n    const _getRightCoverWidth = () => {\n      const rightOperationsZoneWidth = getDomWidth(rightOperations);\n      const rightIconWidth = getDomWidth(toRightBtn);\n      const wrapWidth = getDomWidth(navsWrap);\n      // 判断当前tab是不是最后一个tab，小于1是防止小数像素导致值不相等的情况\n      if (Math.abs(totalWidthBeforeActiveTab + activeTabWidth - wrapWidth) < 1) {\n        // 如果是最后一个tab，则要减去右箭头的宽度，因为此时右箭头会被隐藏\n        return rightOperationsZoneWidth - rightIconWidth;\n      }\n      return rightOperationsZoneWidth;\n    };\n    const rightCoverWidth = _getRightCoverWidth();\n    // 判断当前tab是不是在右边被隐藏\n    const isHiddenInRightZone = scrollLeft + containerWidth - rightCoverWidth\n      < totalWidthBeforeActiveTab + activeTabWidth;\n    if (isHiddenInRightZone) {\n      return totalWidthBeforeActiveTab + activeTabWidth - containerWidth + rightCoverWidth;\n    }\n    return scrollLeft;\n  },\n\n  /**\n   * 计算点击“往左按钮”时，需要的偏移值\n   * @param depElement 计算时依赖的元素\n   * @param scrollLeft 当前的偏移值\n   * @returns number\n   */\n  scrollToLeft(depElement: allElementDeps, scrollLeft: number): number {\n    const { navsContainer: container, leftOperations, toLeftBtn } = depElement;\n    if (!container) return 0;\n    const leftOperationsZoneWidth = getDomWidth(leftOperations);\n    const leftIconWidth = getDomWidth(toLeftBtn);\n    const containerWidth = getDomWidth(container);\n\n    return Math.max(-(leftOperationsZoneWidth - leftIconWidth), scrollLeft - containerWidth);\n  },\n\n  /**\n   * 计算点击“往右按钮”时，需要的偏移值\n   * @param depElement 计算时依赖的元素\n   * @param scrollLeft 当前的偏移值\n   * @returns number\n   */\n  scrollToRight(depElement: allElementDeps, scrollLeft: number): number {\n    const { navsContainer: container, navsWrap: wrap, rightOperations, toRightBtn } = depElement;\n    const rightOperationsZoneWidth = getDomWidth(rightOperations);\n    const rightIconWidth = getDomWidth(toRightBtn);\n    const containerWidth = getDomWidth(container);\n    const wrapWidth = getDomWidth(wrap);\n\n    return Math.min(\n      scrollLeft + containerWidth - rightOperationsZoneWidth - rightIconWidth,\n      wrapWidth - containerWidth + rightOperationsZoneWidth - rightIconWidth,\n    );\n  },\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}