{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * tdesign v1.9.0\n * (c) 2024 tdesign\n * @license MIT\n */\n\nimport { _ as _classCallCheck, a as _createClass } from '../_chunks/dep-12bcaf4a.mjs';\nimport { _ as _defineProperty } from '../_chunks/dep-7deaa3b9.mjs';\nimport { _ as _toConsumableArray } from '../_chunks/dep-b15588b0.mjs';\nimport { ref } from 'vue';\nimport '../_chunks/dep-8dbc9855.mjs';\nimport '../_chunks/dep-8e411f1c.mjs';\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nvar getTreePaths = function getTreePaths(node, val, ans) {\n  if (!node) return;\n  for (var i = 0; i < node.children.length; ++i) {\n    var child = node.children[i];\n    if (child.value === val) return [].concat(_toConsumableArray(ans), [node.value]);\n    var target = getTreePaths(child, val, [].concat(_toConsumableArray(ans), [node.value]));\n    if (target) return target;\n  }\n};\nvar getTreeSameParentNodes = function getTreeSameParentNodes(node, val) {\n  if (!node) return [];\n  for (var i = 0; i < node.children.length; ++i) {\n    var child = node.children[i];\n    if (child.value === val) return node.children;\n    var target = getTreeSameParentNodes(child, val);\n    if (target) return target;\n  }\n};\nvar DFS = function DFS(root, val) {\n  if (root.value === val) return root;\n  if (root.children.length > 0) {\n    for (var i = 0, len = root.children.length; i < len; i++) {\n      var res = DFS(root.children[i], val);\n      if (res) return res;\n    }\n  }\n};\nvar VMenu = /*#__PURE__*/function () {\n  function VMenu(options) {\n    _classCallCheck(this, VMenu);\n    _defineProperty(this, \"data\", null);\n    _defineProperty(this, \"cache\", /* @__PURE__ */new Set());\n    _defineProperty(this, \"isMutex\", ref(false));\n    _defineProperty(this, \"expandValues\", null);\n    var root = {\n      value: null,\n      parent: null,\n      children: []\n    };\n    this.data = root;\n    this.isMutex = options === null || options === void 0 ? void 0 : options.isMutex;\n    this.expandValues = new Set(options === null || options === void 0 ? void 0 : options.expandValues);\n  }\n  _createClass(VMenu, [{\n    key: \"add\",\n    value: function add(item) {\n      var value = item.value,\n        parent = item.parent,\n        vnode = item.vnode;\n      var node = _objectSpread({\n        value: value,\n        parent: parent,\n        children: [],\n        vnode: vnode\n      }, item);\n      this.cache.forEach(function (data, v2, set) {\n        if (item.value === data.parent) {\n          node.children.push(data);\n          set[\"delete\"](data);\n        }\n      });\n      if (item.parent == null) {\n        this.data.children.push(node);\n        node.parent = this.data;\n      } else if (this.data.children.length > 0) {\n        var pNode = DFS(this.data, parent);\n        if (pNode && !pNode.children.some(function (child) {\n          return child.value === node.value;\n        })) {\n          pNode.children.push(node);\n        } else {\n          this.cache.add(node);\n        }\n      } else {\n        this.cache.add(node);\n      }\n    }\n  }, {\n    key: \"select\",\n    value: function select(val) {\n      var activeValues = getTreePaths(this.data, val, []) || [];\n      activeValues.push(val);\n      return activeValues.filter(function (val2) {\n        return val2 != null;\n      });\n    }\n  }, {\n    key: \"expand\",\n    value: function expand(val) {\n      var _this = this;\n      if (this.expandValues.has(val)) {\n        this.expandValues[\"delete\"](val);\n        return _toConsumableArray(this.expandValues);\n      }\n      this.expandValues.add(val);\n      if (!this.isMutex.value) {\n        return _toConsumableArray(this.expandValues);\n      }\n      var sameParentNodes = getTreeSameParentNodes(this.data, val) || [];\n      var sameLevelSubmenuValues = new Set(sameParentNodes.filter(function (node) {\n        var _node$children;\n        return ((_node$children = node.children) === null || _node$children === void 0 ? void 0 : _node$children.length) > 0 && node.value !== val;\n      }).map(function (child) {\n        return child.value;\n      }));\n      this.expandValues.forEach(function (val2) {\n        var isHit = sameLevelSubmenuValues.has(val2);\n        if (isHit) {\n          _this.expandValues[\"delete\"](val2);\n        }\n      });\n      return _toConsumableArray(this.expandValues);\n    }\n  }, {\n    key: \"getChild\",\n    value: function getChild(value) {\n      var target = DFS(this.data, value);\n      return target ? target.children : [];\n    }\n  }]);\n  return VMenu;\n}();\nexport { VMenu as default };","map":{"version":3,"names":["getTreePaths","node","val","ans","i","children","length","child","value","concat","_toConsumableArray","target","getTreeSameParentNodes","DFS","root","len","res","VMenu","options","_classCallCheck","_defineProperty","Set","ref","parent","data","isMutex","expandValues","_createClass","key","add","item","vnode","_objectSpread","cache","forEach","v2","set","push","pNode","some","select","activeValues","filter","val2","expand","_this","has","sameParentNodes","sameLevelSubmenuValues","_node$children","map","isHit","getChild"],"sources":["../../src/menu/v-menu.ts"],"sourcesContent":["import { ref, Slot } from 'vue';\nimport type { TdMenuItemProps } from './type';\ntype MenuValue = string | number;\ntype MenuNode = MenuValue | VMenuData;\n\ninterface VMenuData {\n  value: MenuValue;\n  parent?: MenuNode;\n  children: VMenuData[];\n  vnode?: Slot;\n}\n\ninterface VMenuItem extends TdMenuItemProps {\n  value?: MenuValue;\n  parent: MenuValue;\n  vnode?: Slot;\n}\n\nconst getTreePaths = (node: VMenuData, val: MenuValue, ans: MenuValue[]): MenuValue[] => {\n  if (!node) return;\n  for (let i = 0; i < node.children.length; ++i) {\n    const child = node.children[i];\n    if (child.value === val) return [...ans, node.value];\n    const target = getTreePaths(child, val, [...ans, node.value]);\n    if (target) return target;\n  }\n};\n\nconst getTreeSameParentNodes = (node: VMenuData, val: MenuValue): VMenuData[] => {\n  if (!node) return [];\n  for (let i = 0; i < node.children.length; ++i) {\n    const child = node.children[i];\n    if (child.value === val) return node.children;\n    const target = getTreeSameParentNodes(child, val);\n    if (target) return target;\n  }\n};\n\nconst DFS = (root: VMenuData, val: MenuValue): VMenuData => {\n  if (root.value === val) return root;\n  if (root.children.length > 0) {\n    for (let i = 0, len = root.children.length; i < len; i++) {\n      const res = DFS(root.children[i], val);\n      if (res) return res;\n    }\n  }\n};\n\nexport default class VMenu {\n  data: VMenuData = null;\n\n  cache: Set<VMenuData> = new Set();\n\n  isMutex = ref(false);\n\n  expandValues: Set<MenuValue> = null;\n\n  constructor(options: Record<string, any>) {\n    const root: VMenuData = {\n      value: null,\n      parent: null,\n      children: [],\n    };\n    this.data = root;\n    this.isMutex = options?.isMutex;\n    this.expandValues = new Set(options?.expandValues);\n  }\n\n  add(item: VMenuItem) {\n    const { value, parent, vnode } = item;\n    const node: VMenuData = {\n      value,\n      parent,\n      children: [],\n      vnode,\n      ...item,\n    };\n\n    this.cache.forEach((data, v2, set) => {\n      if (item.value === data.parent) {\n        node.children.push(data);\n        set.delete(data);\n      }\n    });\n    if (item.parent == null) {\n      this.data.children.push(node);\n      node.parent = this.data;\n    } else if (this.data.children.length > 0) {\n      const pNode = DFS(this.data, parent);\n      if (pNode && !pNode.children.some((child) => child.value === node.value)) {\n        pNode.children.push(node);\n      } else {\n        this.cache.add(node);\n      }\n    } else {\n      this.cache.add(node);\n    }\n  }\n\n  select(val: MenuValue) {\n    const activeValues = getTreePaths(this.data, val, []) || [];\n\n    activeValues.push(val);\n    return activeValues.filter((val) => val != null);\n  }\n\n  expand(val: MenuValue) {\n    if (this.expandValues.has(val)) {\n      this.expandValues.delete(val);\n      return [...this.expandValues];\n    }\n\n    this.expandValues.add(val);\n\n    if (!this.isMutex.value) {\n      return [...this.expandValues];\n    }\n\n    const sameParentNodes = getTreeSameParentNodes(this.data, val) || [];\n    const sameLevelSubmenuValues = new Set(\n      sameParentNodes.filter((node) => node.children?.length > 0 && node.value !== val).map((child) => child.value),\n    );\n\n    this.expandValues.forEach((val) => {\n      const isHit = sameLevelSubmenuValues.has(val);\n      if (isHit) {\n        this.expandValues.delete(val);\n      }\n    });\n    return [...this.expandValues];\n  }\n\n  getChild(value: MenuValue) {\n    const target = DFS(this.data, value);\n\n    return target ? target.children : [];\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}