{"ast":null,"code":"/**\n * tdesign v1.9.0\n * (c) 2024 tdesign\n * @license MIT\n */\n\nimport { _ as _slicedToArray } from '../../_chunks/dep-b089fa1f.mjs';\nimport { i as isNumber_1 } from '../../_chunks/dep-0e4de31a.mjs';\nimport { i as isFunction_1 } from '../../_chunks/dep-66473aa9.mjs';\nimport { i as isArray_1 } from '../../_chunks/dep-ab439391.mjs';\nimport { c as cloneDeep_1 } from '../../_chunks/dep-37e3e644.mjs';\nimport { getFullPathLabel, getTreeValue } from './helper.mjs';\nimport '../../_chunks/dep-8e411f1c.mjs';\nimport '../../_chunks/dep-cb814df4.mjs';\nimport '../../_chunks/dep-cd533155.mjs';\nimport '../../_chunks/dep-8dbc9855.mjs';\nimport '../../_chunks/dep-2adf18a2.mjs';\nimport '../../_chunks/dep-715774e0.mjs';\nimport '../../_chunks/dep-5a5a1764.mjs';\nimport '../../_chunks/dep-31dc0415.mjs';\nimport '../../_chunks/dep-e5142249.mjs';\nimport '../../_chunks/dep-c4f80cb4.mjs';\nimport '../../_chunks/dep-996b4900.mjs';\nimport '../../_chunks/dep-3108c312.mjs';\nimport '../../_chunks/dep-93498383.mjs';\nimport '../../_chunks/dep-36582a92.mjs';\nimport '../../_chunks/dep-a2db6df1.mjs';\nimport '../../_chunks/dep-0f89a1dd.mjs';\nimport '../../_chunks/dep-60d62610.mjs';\nimport '../../_chunks/dep-d4da440a.mjs';\nimport '../../_chunks/dep-013382c3.mjs';\nimport '../../_chunks/dep-ca764006.mjs';\nimport '../../_chunks/dep-2ee9d497.mjs';\nimport '../../_chunks/dep-c545db54.mjs';\nimport '../../_chunks/dep-3f15cb30.mjs';\nimport '../../_chunks/dep-fd2b6c64.mjs';\nimport '../../_chunks/dep-60ee423b.mjs';\nfunction expendClickEffect(propsTrigger, trigger, node, cascaderContext) {\n  var checkStrictly = cascaderContext.checkStrictly,\n    multiple = cascaderContext.multiple,\n    treeStore = cascaderContext.treeStore,\n    setVisible = cascaderContext.setVisible,\n    setValue = cascaderContext.setValue,\n    setTreeNodes = cascaderContext.setTreeNodes,\n    setExpend = cascaderContext.setExpend,\n    value = cascaderContext.value,\n    max = cascaderContext.max,\n    valueType = cascaderContext.valueType;\n  var isDisabled = node.disabled || multiple && value.length >= max && max !== 0;\n  if (isDisabled) return;\n  if (propsTrigger === trigger && !node.isLeaf()) {\n    var expanded = node.setExpanded(true);\n    treeStore.refreshNodes();\n    treeStore.replaceExpanded(expanded);\n    var nodes = treeStore.getNodes().filter(function (node2) {\n      return node2.visible;\n    });\n    setTreeNodes(nodes);\n    if (multiple) {\n      setExpend(expanded);\n    }\n  }\n  if (!multiple && (node.isLeaf() || checkStrictly) && trigger === \"click\") {\n    treeStore.resetChecked();\n    var checked = node.setChecked(!node.checked);\n    var _checked = _slicedToArray(checked, 1),\n      value2 = _checked[0];\n    setValue(valueType === \"single\" ? value2 : node.getPath().map(function (item) {\n      return item.value;\n    }), \"check\", node.getModel());\n    if (!checkStrictly) {\n      setVisible(false, {});\n    }\n  }\n}\nfunction valueChangeEffect(node, cascaderContext) {\n  var disabled = cascaderContext.disabled,\n    max = cascaderContext.max,\n    inputVal = cascaderContext.inputVal,\n    multiple = cascaderContext.multiple,\n    setVisible = cascaderContext.setVisible,\n    setValue = cascaderContext.setValue,\n    treeNodes = cascaderContext.treeNodes,\n    treeStore = cascaderContext.treeStore,\n    valueType = cascaderContext.valueType;\n  if (!node || disabled || node.disabled) {\n    return;\n  }\n  var checked = node.setChecked(!node.isChecked());\n  if (isNumber_1(max) && max < 0) {\n    console.warn(\"TDesign Warn:\", \"max should > 0\");\n  }\n  if (checked.length > max && isNumber_1(max) && max > 0) {\n    return;\n  }\n  if (checked.length === 0) {\n    var expanded = treeStore.getExpanded();\n    setTimeout(function () {\n      treeStore.replaceExpanded(expanded);\n      treeStore.refreshNodes();\n    }, 0);\n  }\n  if (!multiple) {\n    setVisible(false, {});\n  }\n  var isSelectAll = treeNodes.every(function (item) {\n    return checked.indexOf(item.value) > -1;\n  });\n  if (inputVal && isSelectAll) {\n    setVisible(false, {});\n  }\n  var resValue = valueType === \"single\" ? checked : checked.map(function (val) {\n    return treeStore.getNode(val).getPath().map(function (item) {\n      return item.value;\n    });\n  });\n  setValue(resValue, node.checked ? \"uncheck\" : \"check\", node.getModel());\n}\nfunction closeIconClickEffect(cascaderContext) {\n  var setVisible = cascaderContext.setVisible,\n    multiple = cascaderContext.multiple,\n    setValue = cascaderContext.setValue;\n  setVisible(false, {});\n  setValue(multiple ? [] : \"\", \"clear\");\n}\nfunction handleRemoveTagEffect(cascaderContext, index, onRemove) {\n  var disabled = cascaderContext.disabled,\n    setValue = cascaderContext.setValue,\n    value = cascaderContext.value,\n    valueType = cascaderContext.valueType,\n    treeStore = cascaderContext.treeStore;\n  if (disabled) return;\n  var newValue = cloneDeep_1(value);\n  var res = newValue.splice(index, 1);\n  var node = treeStore.getNodes(res[0])[0];\n  setValue(newValue, \"uncheck\", node.getModel());\n  var checked = node.setChecked(!node.isChecked());\n  var resValue = valueType === \"single\" ? checked : checked.map(function (val) {\n    return treeStore.getNode(val).getPath().map(function (item) {\n      return item.value;\n    });\n  });\n  setValue(resValue, \"uncheck\", node.getModel());\n  if (isFunction_1(onRemove)) {\n    onRemove({\n      value: checked,\n      node: node\n    });\n  }\n}\nvar treeNodesEffect = function treeNodesEffect(inputVal, treeStore, setTreeNodes, filter) {\n  if (!treeStore) return;\n  var nodes = [];\n  if (inputVal) {\n    var filterMethods = function filterMethods(node) {\n      if (!node.isLeaf()) return;\n      if (isFunction_1(filter)) {\n        return filter(\"\".concat(inputVal), node);\n      }\n      var fullPathLabel = getFullPathLabel(node, \"\");\n      return fullPathLabel.indexOf(\"\".concat(inputVal)) > -1;\n    };\n    nodes = treeStore.nodes.filter(filterMethods);\n  } else {\n    nodes = treeStore.getNodes().filter(function (node) {\n      return node.visible;\n    });\n  }\n  setTreeNodes(nodes);\n};\nvar treeStoreExpendEffect = function treeStoreExpendEffect(treeStore, value, expend) {\n  var treeValue = getTreeValue(value);\n  if (!treeStore) return;\n  if (isArray_1(treeValue) && expend.length === 0) {\n    var expandedMap = /* @__PURE__ */new Map();\n    var _treeValue = _slicedToArray(treeValue, 1),\n      val = _treeValue[0];\n    if (val) {\n      expandedMap.set(val, true);\n      var node = treeStore.getNode(val);\n      if (!node) {\n        treeStore.refreshNodes();\n        return;\n      }\n      node.getParents().forEach(function (tn) {\n        expandedMap.set(tn.value, true);\n      });\n      var expandedArr = Array.from(expandedMap.keys());\n      treeStore.replaceExpanded(expandedArr);\n    }\n  }\n  if (treeStore.getExpanded() && expend.length) {\n    treeStore.replaceExpanded(expend);\n  }\n  treeStore.refreshNodes();\n};\nexport { closeIconClickEffect, expendClickEffect, handleRemoveTagEffect, treeNodesEffect, treeStoreExpendEffect, valueChangeEffect };","map":{"version":3,"names":["expendClickEffect","propsTrigger","trigger","node","cascaderContext","checkStrictly","multiple","treeStore","setVisible","setValue","setTreeNodes","setExpend","value","max","valueType","isDisabled","disabled","length","isLeaf","expanded","setExpanded","refreshNodes","replaceExpanded","nodes","getNodes","filter","node2","visible","resetChecked","checked","setChecked","_checked","_slicedToArray","value2","getPath","map","item","getModel","valueChangeEffect","inputVal","treeNodes","isChecked","isNumber_1","console","warn","getExpanded","setTimeout","isSelectAll","every","indexOf","resValue","val","getNode","closeIconClickEffect","handleRemoveTagEffect","index","onRemove","newValue","cloneDeep_1","res","splice","isFunction_1","treeNodesEffect","filterMethods","concat","fullPathLabel","getFullPathLabel","treeStoreExpendEffect","expend","treeValue","getTreeValue","isArray_1","expandedMap","Map","_treeValue","set","getParents","forEach","tn","expandedArr","Array","from","keys"],"sources":["../../../src/cascader/core/effect.ts"],"sourcesContent":["import isNumber from 'lodash/isNumber';\nimport isFunction from 'lodash/isFunction';\nimport isArray from 'lodash/isArray';\nimport cloneDeep from 'lodash/cloneDeep';\nimport { TreeNode, CascaderContextType, TdCascaderProps, TreeNodeValue, TreeNodeModel } from '../interface';\nimport { getFullPathLabel, getTreeValue } from './helper';\n\n/**\n * 点击item的副作用\n * @param propsTrigger\n * @param trigger\n * @param node\n * @param cascaderContext\n */\nexport function expendClickEffect(\n  propsTrigger: TdCascaderProps['trigger'],\n  trigger: TdCascaderProps['trigger'],\n  node: TreeNode,\n  cascaderContext: CascaderContextType,\n) {\n  const { checkStrictly, multiple, treeStore, setVisible, setValue, setTreeNodes, setExpend, value, max, valueType } =\n    cascaderContext;\n\n  const isDisabled = node.disabled || (multiple && (value as TreeNodeValue[]).length >= max && max !== 0);\n\n  if (isDisabled) return;\n  // 点击展开节点，设置展开状态\n  if (propsTrigger === trigger && !node.isLeaf()) {\n    const expanded = node.setExpanded(true);\n    treeStore.refreshNodes();\n    treeStore.replaceExpanded(expanded);\n    const nodes = treeStore.getNodes().filter((node: TreeNode) => node.visible);\n    setTreeNodes(nodes);\n\n    // 多选条件下手动维护expend\n    if (multiple) {\n      setExpend(expanded);\n    }\n  }\n\n  if (!multiple && (node.isLeaf() || checkStrictly) && trigger === 'click') {\n    treeStore.resetChecked();\n    const checked = node.setChecked(!node.checked);\n    const [value] = checked;\n\n    // 非受控状态下更新状态\n    setValue(valueType === 'single' ? value : node.getPath().map((item) => item.value), 'check', node.getModel());\n\n    if (!checkStrictly) {\n      setVisible(false, {});\n    }\n  }\n}\n\n/**\n * 多选状态下选中状态数据变化的副作用\n * @param node\n * @param cascaderContext\n * @returns\n */\nexport function valueChangeEffect(node: TreeNode, cascaderContext: CascaderContextType) {\n  const { disabled, max, inputVal, multiple, setVisible, setValue, treeNodes, treeStore, valueType } = cascaderContext;\n\n  if (!node || disabled || node.disabled) {\n    return;\n  }\n  const checked = node.setChecked(!node.isChecked());\n\n  if (isNumber(max) && max < 0) {\n    console.warn('TDesign Warn:', 'max should > 0');\n  }\n\n  if (checked.length > max && isNumber(max) && max > 0) {\n    return;\n  }\n\n  if (checked.length === 0) {\n    const expanded = treeStore.getExpanded();\n    setTimeout(() => {\n      treeStore.replaceExpanded(expanded);\n      treeStore.refreshNodes();\n    }, 0);\n  }\n\n  if (!multiple) {\n    setVisible(false, {});\n  }\n\n  const isSelectAll = treeNodes.every((item) => checked.indexOf(item.value) > -1);\n\n  if (inputVal && isSelectAll) {\n    setVisible(false, {});\n  }\n\n  // 处理不同数据类型\n  const resValue =\n    valueType === 'single'\n      ? checked\n      : checked.map((val) =>\n          treeStore\n            .getNode(val)\n            .getPath()\n            .map((item) => item.value),\n        );\n\n  setValue(resValue, node.checked ? 'uncheck' : 'check', node.getModel());\n}\n\n/**\n * closeIcon点击副作用\n * @param cascaderContext\n */\nexport function closeIconClickEffect(cascaderContext: CascaderContextType) {\n  const { setVisible, multiple, setValue } = cascaderContext;\n\n  setVisible(false, {});\n\n  setValue(multiple ? [] : '', 'clear');\n}\n\n/**\n * tag 关闭按钮点击副作用\n * @param cascaderContext\n */\nexport function handleRemoveTagEffect(\n  cascaderContext: CascaderContextType,\n  index: number,\n  onRemove: TdCascaderProps['onRemove'],\n) {\n  const { disabled, setValue, value, valueType, treeStore } = cascaderContext;\n\n  if (disabled) return;\n  const newValue = cloneDeep(value) as [];\n  const res = newValue.splice(index, 1);\n  const node = treeStore.getNodes(res[0])[0];\n\n  setValue(newValue, 'uncheck', node.getModel());\n\n  const checked = node.setChecked(!node.isChecked());\n  // 处理不同数据类型\n  const resValue =\n    valueType === 'single'\n      ? checked\n      : checked.map((val) =>\n          treeStore\n            .getNode(val)\n            .getPath()\n            .map((item) => item.value),\n        );\n\n  setValue(resValue, 'uncheck', node.getModel());\n  if (isFunction(onRemove)) {\n    onRemove({ value: checked, node: node as any });\n  }\n}\n\n/**\n * input和treeStore变化的副作用\n * @param inputVal\n * @param treeStore\n * @param setTreeNodes\n * @returns\n */\nexport const treeNodesEffect = (\n  inputVal: CascaderContextType['inputVal'],\n  treeStore: CascaderContextType['treeStore'],\n  setTreeNodes: CascaderContextType['setTreeNodes'],\n  filter: CascaderContextType['filter'],\n) => {\n  if (!treeStore) return;\n  let nodes = [];\n  if (inputVal) {\n    const filterMethods = (node: TreeNode) => {\n      if (!node.isLeaf()) return;\n      if (isFunction(filter)) {\n        return filter(`${inputVal}`, node as TreeNodeModel & TreeNode);\n      }\n      const fullPathLabel = getFullPathLabel(node, '');\n      return fullPathLabel.indexOf(`${inputVal}`) > -1;\n    };\n\n    nodes = treeStore.nodes.filter(filterMethods);\n  } else {\n    nodes = treeStore.getNodes().filter((node: TreeNode) => node.visible);\n  }\n  setTreeNodes(nodes);\n};\n\n/**\n * 初始化展开阶段与展开状态副作用\n * @param treeStore\n * @param treeValue\n * @param expend\n */\nexport const treeStoreExpendEffect = (\n  treeStore: CascaderContextType['treeStore'],\n  value: CascaderContextType['value'],\n  expend: TreeNodeValue[],\n) => {\n  const treeValue = getTreeValue(value);\n\n  if (!treeStore) return;\n  // init expanded, 无expend状态时设置\n  if (isArray(treeValue) && expend.length === 0) {\n    const expandedMap = new Map();\n    const [val] = treeValue;\n    if (val) {\n      expandedMap.set(val, true);\n      const node = treeStore.getNode(val);\n      if (!node) {\n        treeStore.refreshNodes();\n        return;\n      }\n      node.getParents().forEach((tn: TreeNode) => {\n        expandedMap.set(tn.value, true);\n      });\n      const expandedArr = Array.from(expandedMap.keys());\n      treeStore.replaceExpanded(expandedArr);\n    }\n  }\n  // 本地维护 expend，更加可控，不需要依赖于 tree 的状态\n  if (treeStore.getExpanded() && expend.length) {\n    treeStore.replaceExpanded(expend);\n  }\n  treeStore.refreshNodes();\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}