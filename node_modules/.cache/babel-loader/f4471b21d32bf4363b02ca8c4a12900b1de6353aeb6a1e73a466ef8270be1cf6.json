{"ast":null,"code":"/**\n * tdesign v1.9.0\n * (c) 2024 tdesign\n * @license MIT\n */\n\nimport { getSSRAttach, getAttach } from '../utils/dom.mjs';\nimport { computed, ref, onMounted, watch } from 'vue';\nimport { i as isFunction_1 } from '../_chunks/dep-66473aa9.mjs';\nimport '../_chunks/dep-cb814df4.mjs';\nimport '../_chunks/dep-30b3f256.mjs';\nimport '../_chunks/dep-cd533155.mjs';\nimport '../_chunks/dep-8dbc9855.mjs';\nimport '../_chunks/dep-ab439391.mjs';\nimport '../_chunks/dep-60d62610.mjs';\nimport '../_chunks/dep-2adf18a2.mjs';\nimport '../utils/easing.mjs';\nimport '../_chunks/dep-715774e0.mjs';\nimport '../_chunks/dep-5a5a1764.mjs';\nvar useTeleport = function useTeleport(attach, triggerNode) {\n  var to = isFunction_1(attach) ? computed(attach) : ref(attach);\n  var innerTriggerNode = isFunction_1(triggerNode) ? computed(triggerNode) : ref(triggerNode);\n  var element = ref();\n  var getElement = function getElement() {\n    element.value = getSSRAttach() || getAttach(to.value, innerTriggerNode.value);\n  };\n  onMounted(function () {\n    return getElement();\n  });\n  watch([to, innerTriggerNode], function () {\n    return getElement();\n  });\n  return element;\n};\nexport { useTeleport as default };","map":{"version":3,"names":["useTeleport","attach","triggerNode","to","isFunction_1","computed","ref","innerTriggerNode","element","getElement","value","getSSRAttach","getAttach","onMounted","watch"],"sources":["../../src/hooks/useTeleport.ts"],"sourcesContent":["import { getSSRAttach, getAttach } from '../utils/dom';\nimport { computed, Ref, onMounted, ref, watch } from 'vue';\nimport { AttachNode } from '../common';\nimport isFunction from 'lodash/isFunction';\n\n/**\n * @description 返回挂载的节点, 用于teleport\n * @param attach 既可以是一个函数, 也可以是一个ref\n * @param triggerNode 既可以是一个函数, 也可以是一个ref\n */\nconst useTeleport = (\n  attach: (() => AttachNode) | Ref<AttachNode>,\n  triggerNode?: (() => any) | Ref<any>,\n): Ref<string | Element> => {\n  // 如果是函数, 则使用computed包裹 否则直接使用ref\n  const to = isFunction(attach) ? computed(attach) : ref(attach);\n  const innerTriggerNode = isFunction(triggerNode) ? computed(triggerNode) : ref(triggerNode);\n\n  const element = ref<string | Element>();\n\n  const getElement = () => {\n    element.value = getSSRAttach() || getAttach(to.value, innerTriggerNode.value);\n  };\n\n  onMounted(() => getElement());\n\n  watch([to, innerTriggerNode], () => getElement());\n\n  return element;\n};\n\nexport default useTeleport;\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAUM,IAAAA,WAAA,GAAc,SAAdA,YACJC,MAAA,EACAC,WAC0B;EAEpB,IAAAC,EAAA,GAAKC,YAAA,CAAWH,MAAM,IAAII,QAAA,CAASJ,MAAM,IAAIK,GAAA,CAAIL,MAAM;EACvD,IAAAM,gBAAA,GAAmBH,YAAA,CAAWF,WAAW,IAAIG,QAAA,CAASH,WAAW,IAAII,GAAA,CAAIJ,WAAW;EAE1F,IAAMM,OAAA,GAAUF,GAAsB;EAEtC,IAAMG,UAAA,GAAa,SAAbA,WAAA,EAAmB;IACvBD,OAAA,CAAQE,KAAA,GAAQC,YAAa,MAAKC,SAAA,CAAUT,EAAG,CAAAO,KAAA,EAAOH,gBAAA,CAAiBG,KAAK;GAC9E;EAEUG,SAAA;IAAA,OAAMJ,UAAA,EAAY;GAAA;EAE5BK,KAAA,CAAM,CAACX,EAAI,EAAAI,gBAAgB,CAAG;IAAA,OAAME,UAAA,EAAY;GAAA;EAEzC,OAAAD,OAAA;AACT","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}